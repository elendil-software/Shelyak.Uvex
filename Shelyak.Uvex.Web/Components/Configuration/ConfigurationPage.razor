@page "/Configuration"
@using System.ComponentModel.DataAnnotations
@using System.IO.Ports
@using Microsoft.Extensions.Localization
@using Microsoft.Extensions.Options
@using Shelyak.Usis
@using Shelyak.Uvex.Web.Core.Settings
@using IApplicationLifetime = Microsoft.AspNetCore.Hosting.IApplicationLifetime
@rendermode InteractiveServer
@inject IStringLocalizer<LocalizationResources> Loc;

<PageTitle>@Loc["Configuration_Title"]</PageTitle>
<h3>@Loc["Configuration_Title"]</h3>

<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />

<EditForm Model="@Model" FormName="EditParameters" OnValidSubmit="SubmitForm">
    <DataAnnotationsValidator/>

    <Card Class="mb-4">
        <CardBody>
            <CardTitle>@Loc["Configuration_CardTitle_UVEX"]</CardTitle>
            <div class="row mb-4">
                <label for="comPorts" class="col-sm-2 col-form-label">@Loc["Configuration_Label_COM Port"]</label>
                <div class="col-sm-4">
                    <InputSelect @bind-Value="@Model.SelectedComPort" class="form-select" id="comPorts">
                        <option value=""></option>
                        @foreach (var port in Model.ComPorts)
                        {
                            <option value="@port">@port</option>
                        }
                    </InputSelect>
                    <ValidationMessage class="invalid-feedback" For="@(() => Model.SelectedComPort)"></ValidationMessage>
                </div>
            </div>
            <button class="btn btn-primary">@Loc["Button_Save"]</button>
        </CardBody>
    </Card>
</EditForm>

<Card Class="mb-4">
    <CardBody>
        <CardTitle>@Loc["Configuration_CardTitle_Server"]</CardTitle>
        <div>
            <p>@Loc["Configuration_Shutdown server"]</p>
            <button class="btn btn-secondary" @onclick="ShutdownApp">@Loc["Button_Shutdown"]</button>
        </div>
    </CardBody>
</Card>

@code 
{

    [Inject] protected ToastService ToastService { get; set; }
    [Inject] private ISerialPortSettingsWriter SerialPortSettingsWriter { get; set; }
    [Inject] private IOptionsSnapshot<SerialPortSettings> SerialPortSettingsOptions { get; set; }
    [Inject] private ILogger<ConfigurationPage> Logger { get; set; }
    
    [Inject] private IApplicationLifetime ApplicationLifetime { get; set; }

    private EditConfigurationModel Model { get; set; } = new();
    
    
    protected override void OnInitialized()
    {
        Model = new EditConfigurationModel
        {
            SelectedComPort = SerialPortSettingsOptions.Value.PortName,
            ComPorts = SerialPort.GetPortNames().ToList()
        };
    }

    private async Task SubmitForm()
    {
        try
        {
            var serialPortSettings = SerialPortSettingsOptions.Value;
            serialPortSettings.PortName = Model.SelectedComPort;
            await SerialPortSettingsWriter.Write(serialPortSettings);
            ToastService.Notify(new(ToastType.Success, "Paramètres enregistrés"));
            Logger.LogInformation("Serial port settings saved");
        }
        catch (Exception e)
        {
            ToastService.Notify(new(ToastType.Danger, "Une erreur est survenue"));
            Logger.LogError(e, "Error while saving serial port settings");
        }
    }
    
    private sealed class EditConfigurationModel
    {
        public List<string> ComPorts { get; set; } = new();
        [Required] public string SelectedComPort { get; set; } = string.Empty;
    }

    private void ShutdownApp()
    {
        ApplicationLifetime.StopApplication();
    }
}