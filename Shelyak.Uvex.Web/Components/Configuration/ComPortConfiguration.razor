@rendermode InteractiveServer
@inject ToastService ToastService;
@inject IOptionsMonitor<SerialPortSettings> SerialPortSettingsOptions;
@inject IStringLocalizer<LocalizationResources> Loc;

<EditForm Model="@Model" FormName="EditParameters" OnValidSubmit="SubmitForm">
    <DataAnnotationsValidator/>

    <Card Class="mb-4">
        <CardBody>
            <CardTitle>@Loc["Configuration_ComPort_CardTitle"]</CardTitle>
            <div class="row">
                <div class="col-12 col-lg-4 mb-4">
                    <InputSelect @bind-Value="@Model.SelectedComPort" class="form-select" id="comPorts">
                        <option value=""></option>
                        @foreach (var port in Model.ComPorts)
                        {
                            <option value="@port">@port</option>
                        }
                    </InputSelect>
                    <ValidationMessage class="invalid-feedback" For="@(() => Model.SelectedComPort)"></ValidationMessage>
                </div>
            </div>
            <button class="btn btn-primary">@Loc["Button_Save"]</button>
        </CardBody>
    </Card>
</EditForm>

@code {
    private EditConfigurationModel Model { get; set; } = new();
    
    [Inject] private ISettingsUpdater SettingsUpdater { get; set; } = null!;
    protected override void OnInitialized()
    {
        Model = new EditConfigurationModel
        {
            SelectedComPort = SerialPortSettingsOptions.CurrentValue.PortName,
            ComPorts = SerialPort.GetPortNames().ToList()
        };
    }

    private async Task SubmitForm()
    {
        Result<EmptyResult> result = await new UpdateComPortConfigurationCommand(Model.SelectedComPort).ExecuteAsync();
        ToastService.DisplayToast(result);
    }
    
    private sealed class EditConfigurationModel
    {
        public List<string> ComPorts { get; set; } = new();
        [Required] public string SelectedComPort { get; set; } = string.Empty;
    }
}