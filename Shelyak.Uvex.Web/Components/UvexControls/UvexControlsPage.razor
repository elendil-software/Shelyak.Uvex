@page "/"
@rendermode InteractiveServer

<PageTitle>Contrôles UVEX</PageTitle>

<h3>Contrôles UVEX</h3>
<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />
<UvexInfos/>
<Temperature @ref="TemperatureChildComponent" />
<CalibrationControl @ref="CalibrationControlChildComponent"/>
<GratingAngleControl @ref="GratingAngleControlChildComponent" />
<GratingWaveLengthControl @ref="GratingWaveLengthControlChildComponent"/>
<FocusControl @ref="FocusControlChildComponent" />

@code
{
    private Temperature TemperatureChildComponent { get; set; }
    private FocusControl FocusControlChildComponent { get; set; }
    private GratingWaveLengthControl GratingWaveLengthControlChildComponent { get; set; }
    public GratingAngleControl GratingAngleControlChildComponent { get; set; }
    public CalibrationControl CalibrationControlChildComponent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        RunTimer();
    }

    private readonly PeriodicTimer _periodicTimer = new(TimeSpan.FromSeconds(2));

    private async void RunTimer()
    {
        while (await _periodicTimer.WaitForNextTickAsync())
        {
            await LoadDataAsync();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadDataAsync()
    {
        await CalibrationControlChildComponent.Refresh();
        await TemperatureChildComponent.Refresh();
        await GratingWaveLengthControlChildComponent.Refresh();
        await GratingAngleControlChildComponent.Refresh();
        await FocusControlChildComponent.Refresh();
    }

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (disposing)
        {
            _periodicTimer.Dispose();
        }
    }
}
