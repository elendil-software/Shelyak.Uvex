@page "/"
@implements IDisposable
@rendermode InteractiveServer
@inject IStringLocalizer<LocalizationResources> Loc;

<PageTitle>@Loc["UvexControl_Title"]</PageTitle>
<h3>@Loc["UvexControl_Title"]</h3>

<div class="row">
    <CardContainer>
        <UvexInfos/>
    </CardContainer>
    <CardContainer>
        <Sensors @ref="SensorsChildComponent"/>
    </CardContainer>
    <CardContainer>
        <CalibrationControl @ref="CalibrationControlChildComponent"/>
    </CardContainer>
    <CardContainer>
        <GratingAngleControl @ref="GratingAngleControlChildComponent"/>
    </CardContainer>
    <CardContainer>
        <GratingWaveLengthControl @ref="GratingWaveLengthControlChildComponent"/>
    </CardContainer>
    <CardContainer>
        <FocusControl @ref="FocusControlChildComponent"/>
    </CardContainer>
</div>

@code
{
    private Sensors SensorsChildComponent { get; set; } = null!;
    private FocusControl FocusControlChildComponent { get; set; } = null!;
    private GratingWaveLengthControl GratingWaveLengthControlChildComponent { get; set; } = null!;
    private GratingAngleControl GratingAngleControlChildComponent { get; set; } = null!;
    private CalibrationControl CalibrationControlChildComponent { get; set; } = null!;

    protected override Task OnInitializedAsync()
    {
        RunTimer();
        return Task.CompletedTask;
    }

    private readonly PeriodicTimer _periodicTimer = new(TimeSpan.FromSeconds(2));

    private async void RunTimer()
    {
        while (await _periodicTimer.WaitForNextTickAsync())
        {
            await LoadDataAsync();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadDataAsync()
    {
        await CalibrationControlChildComponent.Refresh();
        await SensorsChildComponent.Refresh();
        await GratingWaveLengthControlChildComponent.Refresh();
        await GratingAngleControlChildComponent.Refresh();
        await FocusControlChildComponent.Refresh();
    }

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (disposing)
        {
            _periodicTimer.Dispose();
        }
    }
}
