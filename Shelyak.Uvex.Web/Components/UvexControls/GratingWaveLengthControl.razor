@inherits Shelyak.Uvex.Web.Components.Shared.Uvex.UvexComponentBase
@rendermode InteractiveServer
@inject IOptionsSnapshot<UvexControlsSettings> Settings
@inject IStringLocalizer<LocalizationResources> Loc;

<Card Class="h-100">
    <CardBody>
        <CardTitle>@Loc["UvexControl_GratingWavelength_CardTitle"]</CardTitle>
    
        <CurrentValue Label="@Loc["UvexControl_GratingWavelength_Label_Current wavelength"]" Value="@CurrentWavelength.ToString("F2")" Unit=" nm" LabelCols="5"/>

        <InputAndButtonsRow LabelFor="wavelength-step-size" LabelText="@Loc["UvexControl_GratingWavelength_Label_Step size"]" LabelCols="5">
            <InputTemplate>
                <InputNumber TValue="float"
                             Value="StepSize"
                             ValueExpression="() => StepSize"
                             ValueChanged="(value) => StepSizeChanged(value)"
                             id="wavelength-step-size"
                             class="form-control"
                             step=".01"
                             min="@MinWavelength" max="@MaxWavelength"/>
            </InputTemplate>
            <ButtonLeftTemplate>
                <button @onclick="@MoveOut" class="btn btn-primary">+</button>
            </ButtonLeftTemplate>
            <ButtonRightTemplate>
                <button @onclick="@MoveIn" class="btn btn-primary">-</button>
            </ButtonRightTemplate>
        </InputAndButtonsRow>

        <InputAndButtonsRow LabelFor="wavelength-position" LabelText="@Loc["UvexControl_GratingWavelength_Label_Target wavelength"]" LabelCols="5">
            <InputTemplate>
                <InputNumber @bind-Value="@AbsolutePosition" step=".01" min="@MinWavelength" max="@MaxWavelength" id="wavelength-position" class="form-control"/>
            </InputTemplate>
            <ButtonLeftTemplate>
                <button @onclick="@GoTo" class="btn btn-primary">@Loc["Button_Go to"]</button>
            </ButtonLeftTemplate>
        </InputAndButtonsRow>
        
        <div class="form-row mb-3">
            <div class="col-auto">
                <button @onclick="@Abort" class="btn btn-danger">@Loc["Button_Halt"]</button>
            </div>
        </div>
    </CardBody>
</Card>

@code
{
    private float MinWavelength { get; set; }
    private float MaxWavelength { get; set; }
    private float StepSize { get; set; }
    private float AbsolutePosition { get; set; }
    private float CurrentWavelength { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var result = await ExecuteAndHandleError(async () => await AlpacaCommands.GetGratingWaveLength());
        if (result.IsSuccessAndHasValue())
        {
            AbsolutePosition = result.Value.Value!.Value;
            CurrentWavelength = result.Value.Value!.Value;
        }
        
        result = await ExecuteAndHandleError(async () => await AlpacaCommands.GetGratingWaveLengthMin());
        MinWavelength = result.IsSuccessAndHasValue() ? result.Value.Value!.Value : 0.0f;
        
        result = await ExecuteAndHandleError(async () => await AlpacaCommands.GetGratingWaveLengthMax());
        MaxWavelength = result.IsSuccessAndHasValue() ? result.Value.Value!.Value : 1000.0f;
        
        StepSize = Settings.Value.GratingWavelengthStepSize;
    }

    protected override async Task LoadData()
    {
        var result = await ExecuteAndHandleError(async () => await AlpacaCommands.GetGratingWaveLength());
        if (result.IsSuccessAndHasValue())
        {
            CurrentWavelength = result.Value.Value!.Value;
        }
    }
    
    private async Task StepSizeChanged(float value)
    {
        StepSize = value;
        var result = await new UpdateGratingWavelengthStepSizeCommand(value).ExecuteAsync();
        if (!result.IsSuccess)
        {
            ToastService.DisplayErrorsToast(result);
        }
    }
    
    private async Task GoTo() => await ExecuteAndHandleError(() => AlpacaCommands.SetGratingWaveLength(AbsolutePosition));
    private async Task MoveIn() => await ExecuteAndHandleError(() => AlpacaCommands.SetGratingWaveLength(CurrentWavelength - StepSize));
    private async Task MoveOut() => await ExecuteAndHandleError(() => AlpacaCommands.SetGratingWaveLength(CurrentWavelength + StepSize));
    private async Task Abort() => await ExecuteAndHandleError(() => AlpacaCommands.StopGratingWaveLength());
}