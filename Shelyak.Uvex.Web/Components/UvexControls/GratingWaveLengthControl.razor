@inherits UvexComponentBase
@rendermode InteractiveServer
@inject IOptionsSnapshot<UvexControlsSettings> Settings
@inject IStringLocalizer<LocalizationResources> Loc;

<Card Class="mb-4">
    <CardBody>
        <CardTitle>@Loc["UvexControl_GratingWavelength_CardTitle"]</CardTitle>

        <ErrorCallout ErrorMessage="@ErrorMessage" />
        
        <EditForm Model="@Model" FormName="wavelength-control-form" OnSubmit="@ExecuteWavelengthControlAction">
            <div class="row mb-3">
                <div class="col-sm-2">@Loc["UvexControl_GratingWavelength_Label_Current wavelength"]</div>
                <div class="col-sm-10">@CurrentWavelength nm</div>
            </div>
            <div class="row mb-3">
                <label for="step-size" class="col-sm-2 col-form-label">@Loc["UvexControl_GratingWavelength_Label_Step size"]</label>
                <div class="col-sm-1">
                    <InputNumber TValue="float"
                                 Value="Model.StepSize"
                                 ValueExpression="() => Model.StepSize"
                                 ValueChanged="(value) => StepSizeChanged(value)"
                                 id="step-size"
                                 class="form-control"
                                 step=".01"
                                 min="@MinWavelength" max="@MaxWavelength" />
                </div>
                <div class="col-sm-9">
                    <button @onclick="@(() => Model.Action = WavelengthControlAction.MoveOut)" class="btn btn-primary">+</button>
                    <button @onclick="@(() => Model.Action = WavelengthControlAction.MoveIn)" class="btn btn-primary">-</button>
                </div>
            </div>
            <div class="row mb-3">
                <label for="position" class="col-sm-2 col-form-label">@Loc["UvexControl_GratingWavelength_Label_Target wavelength"]</label>
                <div class="col-sm-1">
                    <InputNumber @bind-Value="@Model.AbsolutePosition" step=".01" min="@MinWavelength" max="@MaxWavelength" id="position" class="form-control"/>
                </div>
                <div class="col-sm-9">
                    <button @onclick="@(() => Model.Action = WavelengthControlAction.GoTo)" class="btn btn-primary">@Loc["Button_Go to"]</button>
                </div>
            </div>
            <div class="form-row mb-3">
                <div class="col-auto">
                    <button @onclick="@(() => Model.Action = WavelengthControlAction.Abort)" class="btn btn-danger">@Loc["Button_Halt"]</button>
                </div>
            </div>
        </EditForm>
    </CardBody>
</Card>

@code
{
    private float CurrentWavelength { get; set; }
    private float MinWavelength { get; set; } = 0.0f;
    private float MaxWavelength { get; set; } = 1000.0f;
    private WavelengthControlModel Model { get; set; } = new();
    
    protected override async Task LoadData()
    {
        var response = await AlpacaCommands.GetGratingWaveLength();
        HandleAlpacaError(response.Value);
        CurrentWavelength = response.Value.Value.Value;
        
        Model.StepSize = Settings.Value.GratingWavelengthStepSize;
    }
    
    private async Task StepSizeChanged(float value)
    {
        Model.StepSize = value;
        var result = await new UpdateGratingWavelengthStepSizeCommand(value).ExecuteAsync();
        if (!result.IsSuccess)
        {
            ToastService.DisplayErrorsToast(result);
        }
    }
    
    private Task ExecuteWavelengthControlAction()
    {
        switch (Model.Action)
        {
            case WavelengthControlAction.GoTo:
                return GoTo();
            case WavelengthControlAction.MoveIn:
                return MoveIn();
            case WavelengthControlAction.MoveOut:
                return MoveOut();
            case WavelengthControlAction.Abort:
                return Abort();
            default:
                throw new InvalidOperationException($"{Model.Action} is not a supported action");
        }
    }
    
    private async Task GoTo()
    {
        await ExecuteAndHandleError(() => AlpacaCommands.SetGratingWaveLength(Model.AbsolutePosition));
    }

    private async Task MoveIn()
    {
        await ExecuteAndHandleError(() => AlpacaCommands.SetGratingWaveLength(CurrentWavelength - Model.StepSize));
    }

    private async Task MoveOut()
    {
        await ExecuteAndHandleError(() => AlpacaCommands.SetGratingWaveLength(CurrentWavelength + Model.StepSize));
    }
    
    private async Task Abort()
    {
        await ExecuteAndHandleError(() => AlpacaCommands.StopGratingWaveLength());
    }
    
    public class WavelengthControlModel
    {
        public WavelengthControlAction Action { get; set; }
        public float StepSize { get; set; } = 0.05f;
        public float AbsolutePosition { get; set; }
    }

    public enum WavelengthControlAction
    {
        GoTo,
        MoveIn,
        MoveOut,
        Abort
    }
}