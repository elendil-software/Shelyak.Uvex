@inherits UvexComponentBase
@rendermode InteractiveServer
@inject IStringLocalizer<LocalizationResources> Loc;

<Card Class="mb-4">
    <CardBody>
        <CardTitle>@Loc["UvexControl_Focus_CardTitle"]</CardTitle>
        
        <ErrorCallout ErrorMessage="@ErrorMessage" />
        
        <EditForm Model="@Model" FormName="focus-control-form" OnSubmit="@ExecuteFocusControlAction">
            <div class="row mb-3">
                <div class="col-sm-2">@Loc["UvexControl_Focus_Label_Current position"]</div>
                <div class="col-sm-10">@CurrentFocusPosition mm</div>
            </div>
            <div class="row mb-3">
                <label for="step-size" class="col-sm-2 col-form-label">@Loc["UvexControl_Focus_Label_Step size"]</label>
                <div class="col-sm-1">
                    <InputNumber @bind-Value="@Model.StepSize" step=".01" min="@MinFocusPosition" max="@MaxFocusPosition" id="step-size" class="form-control"/>
                </div>
                <div class="col-sm-9">
                    <button @onclick="@(() => Model.Action = FocusControlAction.FocusOut)" class="btn btn-primary">+</button>
                    <button @onclick="@(() => Model.Action = FocusControlAction.FocusIn)" class="btn btn-primary">-</button>
                </div>
            </div>
            <div class="row mb-3">
                <label for="position" class="col-sm-2 col-form-label">@Loc["UvexControl_Focus_Label_Target position"]</label>
                <div class="col-sm-1">
                    <InputNumber @bind-Value="@Model.AbsolutePosition" step=".01" min="@MinFocusPosition" max="10" id="position" class="form-control"/>
                </div>
                <div class="col-sm-9">
                    <button @onclick="@(() => Model.Action = FocusControlAction.GoTo)" class="btn btn-primary">@Loc["Button_Go to"]</button>
                    <button @onclick="@(() => Model.Action = FocusControlAction.Calibrate)" class="btn btn-secondary">@Loc["Button_Calibrate"]</button>
                </div>
            </div>
            <div class="form-row mb-3">
                <div class="col-auto">
                    <button @onclick="@(() => Model.Action = FocusControlAction.Abort)" class="btn btn-danger">@Loc["Button_Halt"]</button>
                </div>
            </div>

        </EditForm>
    </CardBody>
</Card>

@code 
{
    private float MinFocusPosition { get; set; }
    private float MaxFocusPosition { get; set; }
    private float CurrentFocusPosition { get; set; }
    private FocusControlModel Model { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        var focusPositionMin = await AlpacaCommands.GetFocusPositionMin();
        HandleAlpacaError(focusPositionMin.Value);
        MinFocusPosition = focusPositionMin.Value.Value.Value;

        var focusPositionMax = await AlpacaCommands.GetFocusPositionMax();
        HandleAlpacaError(focusPositionMax.Value);
        MaxFocusPosition = focusPositionMax.Value.Value.Value;
    }
    
    protected override async Task LoadData()
    {
        Result<AlpacaResponse<float>> result = await AlpacaCommands.GetFocusPosition();
        HandleAlpacaError(result.Value);
        CurrentFocusPosition = result.Value.Value.Value;
    }


    private Task ExecuteFocusControlAction()
    {
        switch (Model.Action)
        {
            case FocusControlAction.Calibrate:
                return Calibrate();
            case FocusControlAction.GoTo:
                return GoTo();
            case FocusControlAction.FocusIn:
                return FocusIn();
            case FocusControlAction.FocusOut:
                return FocusOut();
            case FocusControlAction.Abort:
                return Abort();
            default:
                throw new InvalidOperationException($"{Model.Action} is not a supported action");
        }
    }
    
    private async Task FocusOut()
    {
        await ExecuteAndHandleError(() => AlpacaCommands.SetFocusPosition(CurrentFocusPosition + Model.StepSize));
    }

    private async Task FocusIn()
    {
        await ExecuteAndHandleError(() => AlpacaCommands.SetFocusPosition(CurrentFocusPosition - Model.StepSize));
    }
    
    private async Task GoTo()
    {
        await ExecuteAndHandleError(() => AlpacaCommands.SetFocusPosition(Model.AbsolutePosition));
    }
    
    private async Task Abort()
    {
        await ExecuteAndHandleError(() => AlpacaCommands.StopFocusPosition());
    }

    private async Task Calibrate()
    {
        await ExecuteAndHandleError(() => AlpacaCommands.CalibrateFocusPosition(Model.AbsolutePosition));
    }
    
    public enum FocusControlAction
    {
        Calibrate,
        GoTo,
        FocusIn,
        FocusOut,
        Abort
    }

    public class FocusControlModel
    {
        public FocusControlAction Action { get; set; }
        public float StepSize { get; set; } = 0.05f;
        public float AbsolutePosition { get; set; }
    }
}