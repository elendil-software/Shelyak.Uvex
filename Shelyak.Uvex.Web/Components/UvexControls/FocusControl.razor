@inherits Shelyak.Uvex.Web.Components.Shared.Uvex.UvexComponentBase
@rendermode InteractiveServer
@inject IOptionsMonitor<UvexControlsSettings> Settings
@inject IStringLocalizer<LocalizationResources> Loc

<Card Class="h-100">
    <CardBody>
        <CardTitle>@Loc["UvexControl_Focus_CardTitle"]</CardTitle>

        <CurrentValue Label="@Loc["UvexControl_Focus_Label_Current position"]" Value="@CurrentFocusPosition.ToString("F2")" Unit=" mm"/>

        <InputAndButtonsRow LabelFor="focus-step-size" LabelText="@Loc["UvexControl_Focus_Label_Step size"]">
            <InputTemplate>
                <InputNumber TValue="float"
                             Value="StepSize"
                             ValueExpression="() => StepSize"
                             ValueChanged="(value) => StepSizeChanged(value)"
                             id="focus-step-size" class="form-control"
                             step=".01" min="@MinFocusPosition" max="@MaxFocusPosition"/>
            </InputTemplate>
            <ButtonLeftTemplate>
                <button @onclick="@FocusOut" class="btn btn-primary">+</button>
            </ButtonLeftTemplate>
            <ButtonRightTemplate>
                <button @onclick="@FocusIn" class="btn btn-primary">-</button>
            </ButtonRightTemplate>
        </InputAndButtonsRow>

        <InputAndButtonsRow LabelFor="focus-position" LabelText="@Loc["UvexControl_Focus_Label_Target position"]">
            <InputTemplate>
                <InputNumber @bind-Value="@AbsolutePosition" step=".01" min="@MinFocusPosition" max="@MaxFocusPosition" id="focus-position" class="form-control"/>
            </InputTemplate>
            <ButtonLeftTemplate>
                <button @onclick="@GoTo" class="btn btn-primary">@Loc["Button_Go to"]</button>
            </ButtonLeftTemplate>
            <ButtonRightTemplate>
                <button @onclick="@Calibrate" class="btn btn-secondary">@Loc["Button_Calibrate"]</button>
            </ButtonRightTemplate>
        </InputAndButtonsRow>

        <div class="form-row mb-3">
            <div class="col-auto">
                <button @onclick="@Abort" class="btn btn-danger">@Loc["Button_Halt"]</button>
            </div>
        </div>
    </CardBody>
</Card>

@code
{
    private float MinFocusPosition { get; set; }
    private float MaxFocusPosition { get; set; }
    private float StepSize { get; set; }
    private float AbsolutePosition { get; set; }
    private float CurrentFocusPosition { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var result = await ExecuteAndHandleError(async () => await AlpacaCommands.GetFocusPositionMin());
        MinFocusPosition = result.IsSuccessAndHasValue() ? result.Value.Value!.Value : 0.0f;

        result = await ExecuteAndHandleError(async () => await AlpacaCommands.GetFocusPositionMax());
        MaxFocusPosition = result.IsSuccessAndHasValue() ? result.Value.Value!.Value : 0.0f;

        result = await ExecuteAndHandleError(async () => await AlpacaCommands.GetFocusPosition());
        if (result.IsSuccessAndHasValue())
        {
            AbsolutePosition = result.Value.Value!.Value;
            CurrentFocusPosition = result.Value.Value!.Value;
        }

        StepSize = Settings.CurrentValue.FocusStepSize;
    }

    protected override async Task LoadData()
    {
        var result = await ExecuteAndHandleError(async () => await AlpacaCommands.GetFocusPosition());
        if (result.IsSuccessAndHasValue())
        {
            CurrentFocusPosition = result.Value.Value!.Value;
        }
    }

    private async Task StepSizeChanged(float value)
    {
        StepSize = value;
        var result = await new UpdateFocusStepSizeCommand(value).ExecuteAsync();
        if (!result.IsSuccess)
        {
            ToastService.DisplayErrorsToast(result);
        }
    }
    
    private async Task FocusOut() => await ExecuteAndHandleError(() => AlpacaCommands.SetFocusPosition(CurrentFocusPosition + StepSize));
    private async Task FocusIn() => await ExecuteAndHandleError(() => AlpacaCommands.SetFocusPosition(CurrentFocusPosition - StepSize));
    private async Task GoTo() => await ExecuteAndHandleError(() => AlpacaCommands.SetFocusPosition(AbsolutePosition));
    private async Task Abort() => await ExecuteAndHandleError(() => AlpacaCommands.StopFocusPosition());
    private async Task Calibrate()
    {
        var result = await ExecuteAndHandleError(() => AlpacaCommands.CalibrateFocusPosition(AbsolutePosition));
        if (result.IsSuccess)
        {
            ToastService.DisplaySuccessToast(Loc["UvexControl_Calibration_Success"]);
        }
    }
}