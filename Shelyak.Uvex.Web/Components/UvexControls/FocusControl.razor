@inherits UvexComponentBase
@rendermode InteractiveServer

<Card Class="mb-4">
    <CardBody>
        <CardTitle>Focalisation</CardTitle>
        
        <ErrorCallout ErrorMessage="@ErrorMessage" />
        
        <EditForm Model="@Model" FormName="focus-control-form" OnSubmit="@ExecuteFocusControlAction">
            <div class="row mb-3">
                <div class="col-sm-2">Position actuelle</div>
                <div class="col-sm-10">@CurrentFocusPosition</div>
            </div>
            <div class="row mb-3">
                <label for="step-size" class="col-sm-2 col-form-label">Taille de pas</label>
                <div class="col-sm-1">
                    <InputNumber @bind-Value="@Model.StepSize" step=".01" min="@MinFocusPosition" max="@MaxFocusPosition" id="step-size" class="form-control"/>
                </div>
                <div class="col-sm-9">
                    <button @onclick="@(() => Model.Action = FocusControlAction.FocusOut)" class="btn btn-primary">+</button>
                    <button @onclick="@(() => Model.Action = FocusControlAction.FocusIn)" class="btn btn-primary">-</button>
                </div>
            </div>
            <div class="row mb-3">
                <label for="position" class="col-sm-2 col-form-label">Position cible</label>
                <div class="col-sm-1">
                    <InputNumber @bind-Value="@Model.AbsolutePosition" step=".01" min="@MinFocusPosition" max="@MaxFocusPosition" id="position" class="form-control"/>
                </div>
                <div class="col-sm-9">
                    <button @onclick="@(() => Model.Action = FocusControlAction.GoTo)" class="btn btn-primary">Aller à</button>
                    <button @onclick="@(() => Model.Action = FocusControlAction.Calibrate)" class="btn btn-secondary">Calibrer</button>
                </div>
            </div>
            <div class="form-row mb-3">
                <div class="col-auto">
                    <button @onclick="@(() => Model.Action = FocusControlAction.Abort)" class="btn btn-danger">Interrompre</button>
                </div>
            </div>

        </EditForm>
    </CardBody>
</Card>

@code 
{
    public float MinFocusPosition { get; set; }
    public float MaxFocusPosition { get; set; }
    private float CurrentFocusPosition { get; set; }
    public FocusControlModel Model { get; set; } = new();
    
    

    protected override async Task OnInitializedAsync()
    {
        var focusPositionMin = await UvexHttpClient.GetFocusPositionMin();
        HandleAlpacaError(focusPositionMin);
        MinFocusPosition = focusPositionMin.Value.Value;

        var focusPositionMax = await UvexHttpClient.GetFocusPositionMax();
        HandleAlpacaError(focusPositionMax);
        MaxFocusPosition = focusPositionMax.Value.Value;
    }
    
    protected override async Task LoadData()
    {
        var focusPosition = await UvexHttpClient.GetFocusPosition();
        HandleAlpacaError(focusPosition);
        CurrentFocusPosition = focusPosition.Value.Value;
    }

    
    public Task ExecuteFocusControlAction()
    {
        switch (Model.Action)
        {
            case FocusControlAction.Calibrate:
                return Calibrate();
            case FocusControlAction.GoTo:
                return GoTo();
            case FocusControlAction.FocusIn:
                return FocusIn();
            case FocusControlAction.FocusOut:
                return FocusOut();
            case FocusControlAction.Abort:
                return Abort();
            default:
                throw new InvalidOperationException($"{Model.Action} is not a supported action");
        }
    }
    
    private async Task FocusOut()
    {
        await ExecuteAndHandleException(async () => { await UvexHttpClient.SetFocusPosition(CurrentFocusPosition + Model.StepSize); });
    }

    private async Task FocusIn()
    {
        await ExecuteAndHandleException(async () => { await UvexHttpClient.SetFocusPosition(CurrentFocusPosition - Model.StepSize); });
    }
    
    private async Task GoTo()
    {
        await ExecuteAndHandleException(async () => { await UvexHttpClient.SetFocusPosition(Model.AbsolutePosition); });
    }
    
    private async Task Abort()
    {
        await ExecuteAndHandleException(async () => { await UvexHttpClient.StopFocusPosition(); });
    }

    private async Task Calibrate()
    {
        await ExecuteAndHandleException(async () => { await UvexHttpClient.CalibrateFocusPosition(Model.AbsolutePosition); });
    }
    
    public enum FocusControlAction
    {
        Calibrate,
        GoTo,
        FocusIn,
        FocusOut,
        Abort
    }

    public class FocusControlModel
    {
        public FocusControlAction Action { get; set; }
        public float StepSize { get; set; } = 0.05f;
        public float AbsolutePosition { get; set; }
    }
}