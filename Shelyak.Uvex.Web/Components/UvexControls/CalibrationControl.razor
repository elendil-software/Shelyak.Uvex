@inherits UvexComponentBase
@rendermode InteractiveServer
@inject IStringLocalizer<LocalizationResources> Loc;

<Card Class="mb-4">
    <CardBody>
        <CardTitle>@Loc["UvexControl_Calibration_CardTitle"]</CardTitle>

        <ErrorCallout ErrorMessage="@ErrorMessage" />
        
        <div class="row">
            <div class="form-check form-switch">
                <InputCheckbox @bind-Value="@Model.Sky" class="form-check-input" type="checkbox" role="switch" id="skySwitch" @onclick="EnableSky"/>
                <label class="form-check-label" for="skySwitch">@Loc["UvexControl_Calibration_Switch_Sky"]</label>
            </div>
            <div class="form-check form-switch">
                <InputCheckbox @bind-Value="@Model.Flat" class="form-check-input" type="checkbox" role="switch" id="flatSwitch" @onclick="EnableFlat"/>
                <label class="form-check-label" for="flatSwitch">@Loc["UvexControl_Calibration_Switch_Flat"]</label>
            </div>
            <div class="form-check form-switch">
                <InputCheckbox @bind-Value="@Model.Calibration" class="form-check-input" type="checkbox" role="switch" id="calibrationSwitch" @onclick="EnableCalibration"/>
                <label class="form-check-label" for="calibrationSwitch">@Loc["UvexControl_Calibration_Switch_Calibration"]</label>
            </div>
            <div class="form-check form-switch">
                <InputCheckbox @bind-Value="@Model.Dark" class="form-check-input" type="checkbox" role="switch" id="darkSwitch" @onclick="EnableDark"/>
                <label class="form-check-label" for="darkSwitch">@Loc["UvexControl_Calibration_Switch_Dark"]</label>
            </div>
        </div>
    </CardBody>
</Card>

@code
{
    private CalibrationControlModel Model { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentLightSource();
    }
    
    protected override async Task LoadData()
    {
        await LoadCurrentLightSource();
    }

    private async Task LoadCurrentLightSource()
    {
        var currentLightSource = (await UvexHttpClient.GetLightSource());
        HandleAlpacaError(currentLightSource);
        SetSwitchesState(currentLightSource.Value.Value);
    }

    private async Task EnableSky()
    {
        await ExecuteAndHandleException(async () =>
        {
            SetSwitchesState(LightSource.SKY);
            await UvexHttpClient.SetLightSource(LightSource.SKY);
        });
    }

    private async Task EnableFlat()
    {
        await ExecuteAndHandleException(async () =>
        {
            SetSwitchesState(LightSource.FLAT);
            await UvexHttpClient.SetLightSource(LightSource.FLAT);
        });
    }

    private async Task EnableCalibration()
    {
        await ExecuteAndHandleException(async () =>
        {
            SetSwitchesState(LightSource.CALIB);
            await UvexHttpClient.SetLightSource(LightSource.CALIB);
        });
    }

    private async Task EnableDark()
    {
        await ExecuteAndHandleException(async () =>
        {
            SetSwitchesState(LightSource.DARK);
            await UvexHttpClient.SetLightSource(LightSource.DARK);
        });
    }
    
    private void SetSwitchesState(LightSource activeLightSource)
    {
        Model.Sky = activeLightSource == LightSource.SKY;
        Model.Flat = activeLightSource == LightSource.FLAT;
        Model.Calibration = activeLightSource == LightSource.CALIB;
        Model.Dark = activeLightSource == LightSource.DARK;
    }

    public class CalibrationControlModel
    {
        public bool Sky { get; set; }
        public bool Flat { get; set; }
        public bool Calibration { get; set; }
        public bool Dark { get; set; }
    }
}
