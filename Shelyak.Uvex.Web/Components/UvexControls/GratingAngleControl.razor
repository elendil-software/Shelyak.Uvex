@inherits Shelyak.Uvex.Web.Components.Shared.Uvex.UvexComponentBase
@rendermode InteractiveServer
@inject IOptionsMonitor<UvexControlsSettings> Settings
@inject IStringLocalizer<LocalizationResources> Loc;

<Card Class="h-100">
    <CardBody>
        <CardTitle>@Loc["UvexControl_GratingAngle_CardTitle"]</CardTitle>
        
        <CurrentValue Label="@Loc["UvexControl_GratingAngle_Label_Current angle"]" Value="@CurrentAngle.ToString("F2")" Unit="°" />

        <InputAndButtonsRow LabelFor="grating-angle-step-size" LabelText="@Loc["UvexControl_GratingAngle_Label_Step size"]">
            <InputTemplate>
                <InputNumber TValue="float"
                             Value="StepSize"
                             ValueExpression="() => StepSize"
                             ValueChanged="(value) => StepSizeChanged(value)"
                             id="grating-angle-step-size"
                             class="form-control"
                             step=".01"
                             min="@MinAngle" max="@MaxAngle"/>
            </InputTemplate>
            <ButtonLeftTemplate>
                <button @onclick="@MoveCw" class="btn btn-primary">+</button>
            </ButtonLeftTemplate>
            <ButtonRightTemplate>
                <button @onclick="@MoveCcw" class="btn btn-primary">-</button>
            </ButtonRightTemplate>
        </InputAndButtonsRow>

        <InputAndButtonsRow LabelFor="grating-angle-position" LabelText="@Loc["UvexControl_GratingAngle_Label_Target angle"]">
            <InputTemplate>
                <InputNumber @bind-Value="@AbsolutePosition" step=".01" min="@MinAngle" max="@MaxAngle" id="grating-angle-position" class="form-control"/>
            </InputTemplate>
            <ButtonLeftTemplate>
                <button @onclick="@GoTo" class="btn btn-primary">@Loc["Button_Go to"]</button>
            </ButtonLeftTemplate>
            <ButtonRightTemplate>
                <button @onclick="@Calibrate" class="btn btn-secondary">@Loc["Button_Calibrate"]</button>
            </ButtonRightTemplate>
        </InputAndButtonsRow>

        <div class="form-row mb-3">
            <div class="col-auto">
                <button @onclick="@Abort" class="btn btn-danger">@Loc["Button_Halt"]</button>
            </div>
        </div>
    </CardBody>
</Card>

@code
{
    private float MinAngle { get; set; }
    private float MaxAngle { get; set; }
    private float StepSize { get; set; }
    private float AbsolutePosition { get; set; }
    private float CurrentAngle { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var result = await ExecuteAndHandleError(async () => await AlpacaCommands.GetGratingAngleMin());
        MinAngle = result.IsSuccessAndHasValue() ? result.Value.Value!.Value : 0.0f;
        
        result = await ExecuteAndHandleError(async () => await AlpacaCommands.GetGratingAngleMax());
        MaxAngle = result.IsSuccessAndHasValue() ? result.Value.Value!.Value : 0.0f;
        
        result = await ExecuteAndHandleError(async () => await AlpacaCommands.GetGratingAngle());
        if (result.IsSuccessAndHasValue())
        {
            AbsolutePosition = result.Value.Value!.Value;
            CurrentAngle = result.Value.Value!.Value;
        }

        await LoadData();
        
        StepSize = Settings.CurrentValue.GratingAngleStepSize;
    }
    
    protected override async Task LoadData()
    {
        var result = await ExecuteAndHandleError(async () => await AlpacaCommands.GetGratingAngle());
        if (result.IsSuccessAndHasValue())
        {
            CurrentAngle = result.Value.Value!.Value;
        }
    }
    
    private async Task StepSizeChanged(float value)
    {
        StepSize = value;
        var result = await new UpdateGratingAngleStepSizeCommand(value).ExecuteAsync();
        if (!result.IsSuccess)
        {
            ToastService.DisplayErrorsToast(result);
        }
    }
    
    private async Task Calibrate() => await ExecuteAndHandleError(() => AlpacaCommands.CalibrateGratingAngle(AbsolutePosition));
    private async Task GoTo() => await ExecuteAndHandleError(() => AlpacaCommands.SetGratingAngle(AbsolutePosition));
    private async Task MoveCcw() => await ExecuteAndHandleError(() => AlpacaCommands.SetGratingAngle(CurrentAngle - StepSize));
    private async Task MoveCw() => await ExecuteAndHandleError(() => AlpacaCommands.SetGratingAngle(CurrentAngle + StepSize));
    private async Task Abort() => await ExecuteAndHandleError(() => AlpacaCommands.StopGratingAngle());
}