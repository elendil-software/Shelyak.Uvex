@inherits UvexComponentBase
@rendermode InteractiveServer

<Card Class="mb-4">
    <CardBody>
        <CardTitle>Angle du réseau</CardTitle>

        <ErrorCallout ErrorMessage="@ErrorMessage" />
        
        <EditForm Model="@Model" FormName="angle-control-form" OnSubmit="@ExecuteAngleControlAction">
            <div class="row mb-3">
                <div class="col-sm-2">Angle actuel</div>
                <div class="col-sm-10">@CurrentAngle</div>
            </div>
            <div class="row mb-3">
                <label for="step-size" class="col-sm-2 col-form-label">Taille de pas</label>
                <div class="col-sm-1">
                    <InputNumber @bind-Value="@Model.StepSize" step=".01" min="@MinAngle" max="@MaxAngle" id="step-size" class="form-control"/>
                </div>
                <div class="col-sm-9">
                    <button @onclick="@(() => Model.Action = AngleControlAction.MoveCw)" class="btn btn-primary">+</button>
                    <button @onclick="@(() => Model.Action = AngleControlAction.MoveCcw)" class="btn btn-primary">-</button>
                </div>
            </div>
            <div class="row mb-3">
                <label for="position" class="col-sm-2 col-form-label">Angle cible</label>
                <div class="col-sm-1">
                    <InputNumber @bind-Value="@Model.AbsolutePosition" step=".01" min="@MinAngle" max="@MaxAngle" id="position" class="form-control"/>
                </div>
                <div class="col-sm-9">
                    <button @onclick="@(() => Model.Action = AngleControlAction.GoTo)" class="btn btn-primary">Aller à</button>
                    <button @onclick="@(() => Model.Action = AngleControlAction.Calibrate)" class="btn btn-secondary">Calibrer</button>
                </div>
            </div>
            <div class="form-row mb-3">
                <div class="col-auto">
                    <button @onclick="@(() => Model.Action = AngleControlAction.Abort)" class="btn btn-danger">Interrompre</button>
                </div>
            </div>
        </EditForm>
    </CardBody>
</Card>

@code
{
    private float CurrentAngle { get; set; }
    private float MinAngle { get; set; } = 0.0f;
    private float MaxAngle { get; set; } = 1000.0f;
    private AngleControlModel Model { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        var gratingAngleMin = await UvexHttpClient.GetGratingAngleMin();
        HandleAlpacaError(gratingAngleMin);
        MinAngle = gratingAngleMin.Value.Value;

        var gratingAngleMax = await UvexHttpClient.GetGratingAngleMax();
        HandleAlpacaError(gratingAngleMax);
        MaxAngle = gratingAngleMax.Value.Value;
    }
    
    protected override async Task LoadData()
    {
        var response = await UvexHttpClient.GetGratingAngle();
        HandleAlpacaError(response);
        CurrentAngle = response.Value.Value;
    }
    
    private Task ExecuteAngleControlAction()
    {
        switch (Model.Action)
        {
            case AngleControlAction.Calibrate:
                return Calibrate();
            case AngleControlAction.GoTo:
                return GoTo();
            case AngleControlAction.MoveCcw:
                return MoveIn();
            case AngleControlAction.MoveCw:
                return MoveOut();
            case AngleControlAction.Abort:
                return Abort();
            default:
                throw new InvalidOperationException($"{Model.Action} is not a supported action");
        }
    }
    
    private async Task Calibrate()
    {
        await ExecuteAndHandleException(async () => { await UvexHttpClient.CalibrateGratingAngle(Model.AbsolutePosition); });
    }
    
    private async Task GoTo()
    {
        await ExecuteAndHandleException(async () => { await UvexHttpClient.SetGratingAngle(Model.AbsolutePosition); });
    }

    private async Task MoveIn()
    {
        await ExecuteAndHandleException(async () => { await UvexHttpClient.SetGratingAngle(CurrentAngle - Model.StepSize); });
    }

    private async Task MoveOut()
    {
        await ExecuteAndHandleException(async () => { await UvexHttpClient.SetGratingAngle(CurrentAngle + Model.StepSize); });
    }
    
    private async Task Abort()
    {
        await ExecuteAndHandleException(async () => { await UvexHttpClient.StopGratingAngle(); });
    }


    public class AngleControlModel
    {
        public AngleControlAction Action { get; set; }
        public float StepSize { get; set; } = 0.05f;
        public float AbsolutePosition { get; set; }
    }

    public enum AngleControlAction
    {
        Calibrate,
        GoTo,
        MoveCcw,
        MoveCw,
        Abort
    }
}
